Assignment: Assignment 1: Use Mapping Libraries in EmployeeService and DepartmentService
60 minutes to complete
181 student solutions
Complete this assignment to get hands-on experience using Mapping libraries in Spring boot applications

..............................
Assignment: Assignment 2: Exception Handling in EmployeeService and DepartmentService
60 minutes to complete
130 student solutions
Complete this assignment to get hands-on experience handling exceptions in Spring boot applications and return a proper error response back to the client.

...............................
Requirements-
1- consider employee belongs to department and employee has a unique department code .
2- Change get employee RestApi to return employee along with it's department in response.

..........Development Steps-1......................
1-Add departmentCode field in Employee JPA entity
2-Create departmentDTO class
3-configure RestTemplate as SpringBean
4-Inject and use RestTemplate to make RestApi call in EmployeeserviceImpl Class
........................................................
Run Both
http://localhost:8081/api/employees/5
.....................................
http://localhost:8081/api/employees/create
{
    "firstName":"sumanthk",
    "lastName":"purbey",
    "email":"ankit023@gmail.com",
    "departmentCode":"1144"
}

.....................................................

Devlopment steps-2
1-Add web flux dependency
2-configure webclient as springbean
3-Inject and use WebClient to call the RestApi
4-Test Using Postman client

.............................................
Devlopment steps-3
1-Add spring cloud feign maven dependency to employee-service
2-enable using annotations @EnableFeignClients
3-create feign api clients
4-change the getemployeebyid method to use APIclien
5-Test using postman

..............................................
Devlopment steps-
1-Create springboot project as Microservice(service-registry)
2-Add @EnableEurekaServer annotations
3-Disable Eureka server as Eureka Client
4-Launch Eureka Server(Demo)
5-Registering Department-service Microservice as Eureka Client(Adding dependency)
6-Run department-service Eureka(Demo)
7-Registering Employee-service Nicroservice as Eureka Client
8-Run employee-service Eureka Client(Demo)
9-Multiple Instances of Department-Service
10-load balancing

............Working...................
Note department client
service registery server
both have added dependency and configure url in client
first run service then department
on web paste registry url and see showing or not
...........IF NOT WORK RESTART APPLICATION AND RUN AGAIN IT WILL RESOLVED THE ISSUE..............
Donâ€™t annotate an entry-point EmployeeServiceApplication class with @EnableEurekaClient -
This annotation was removed in spring cloud 2022.0.0 and provided auto-configuration.
......................................................
...........LOAD BALANCING STEPS............
-Department service create 2 instance by using jar file(
.go to department select and then maven then lifecycle then package it will build jar in target folder
.in Target there is JAR and there is Name showing snapshot like that
.GO TO TERMINAL
.CD FOLDER current folder then put below command and jar file name then run it will run on that port
.java -jar -Dserver.port:8082 target/department-service-0.0.1-SNAPSHOT.jar
)
-Add Url in department service -8080,8082(JAR File)
-postman testing by request send post 8080,8082
-employee service open feign client-8081
-Api Client, Impl , employee service for url configuration


...........................................................................................

........................GATEWAY DEVELOPMENT STEPS.......................
- Create Spring boot project as Microservice (API GATEWAY)
- Register API-GATEWAY as Eureka Client to Eureka Server(Service Registry)
- Configuring API GATEWAY Routes and Test using Postman Client
- Added dependency- eureka client,actuator, gateway
//BYId manually routes
url postman get - http://localhost:9191/api/employees/5
//ByCode
http://localhost:9191/api/departments/1144

//if u use auto routes then use this
url - http://localhost:9191/employee-service/api/employees/5
url - http://localhost:9191/department-service/api/departments/1144
........................................................................

..............Centralized Configuration..................
1- create spring boot project as microservice(config server)
& add dependency config server,actuator,eureka discovery client
2- register config-server as eureka client
3- set up git location for config server
4- refactor department service to use config server
5- refactor employee service to use config server
6- refresh use cases

Note:- getting error when config git in department service
 then added actuator, config client and put port in git file working fine..
 - registry - gateway then
 - Config server(created for git file) run then employee & department
 - added github link in config file which contains properties
 - employee,department put here config server url for configuration
- Refresh usecase not need to restart config server after changes-
 department controleer- message controller
- postman url get- http://localhost:8080/message
- config server restart only after changes in github department file no need to restart department servce
for refresh changes post- http://localhost:8080/actuator/refresh we have to do manually refresh from postman
 ...............................................................................

 ...........................Devlopment Steps........................
 1- Add spring-cloud-starter-bus-amqp dependency in department service and employee service
 2- Install RabitMQ using Docker
 3- RabitMQ configuration in application.properties of department service & employee service
 4- Create Simple RestApi in employee service
 5- Change department service and Employee service properties file and call/busrefresh
 6- Demo
 -Install docker- cmd type and pull rabbitq cmd- docker pull rabbitmq:3.11.0
 -then go to docker it's visible now
 -run rabbitmq in cmd - run --rm -it -p 5672:5672 rabbitmq:3.11.0
 -Now add properties in employee,department

 -postman get - http://localhost:8081/user/message & http://localhost:8080/message
 After changes , Refresh- http://localhost:8080/actuator/busrefresh  http://localhost:8081/actuator/busrefresh

 .....................................................................